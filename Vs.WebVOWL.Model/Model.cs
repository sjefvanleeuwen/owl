// <auto-generated />
//
// To parse this JSON data, add NuGet 'Newtonsoft.Json' then do:
//
//    using QuickType;
//
//    var welcome = Welcome.FromJson(jsonString);

namespace Model
{
    using System;
    using System.Collections.Generic;

    using System.Globalization;
    using Newtonsoft.Json;
    using Newtonsoft.Json.Converters;

    public partial class Welcome
    {
        [JsonProperty("_comment")]
        public string Comment { get; set; }

        [JsonProperty("header")]
        public Header Header { get; set; }

        [JsonProperty("namespace")]
        public List<object> Namespace { get; set; }

        [JsonProperty("settings")]
        public Settings Settings { get; set; }

        [JsonProperty("class")]
        public List<Class> Class { get; set; }

        [JsonProperty("classAttribute")]
        public List<ClassAttribute> ClassAttribute { get; set; }

        [JsonProperty("property")]
        public List<Class> Property { get; set; }

        [JsonProperty("propertyAttribute")]
        public List<PropertyAttribute> PropertyAttribute { get; set; }
    }

    public partial class Class
    {
        [JsonProperty("id")]
        public string Id { get; set; }

        [JsonProperty("type")]
        public string Type { get; set; }
    }

    public partial class ClassAttribute
    {
        [JsonProperty("id")]
        public string Id { get; set; }

        [JsonProperty("iri", NullValueHandling = NullValueHandling.Ignore)]
        public Uri Iri { get; set; }

        [JsonProperty("baseIri", NullValueHandling = NullValueHandling.Ignore)]
        public Uri BaseIri { get; set; }

        [JsonProperty("label", NullValueHandling = NullValueHandling.Ignore)]
        public ClassAttributeLabel? Label { get; set; }

        [JsonProperty("attributes", NullValueHandling = NullValueHandling.Ignore)]
        public List<string> Attributes { get; set; }

        [JsonProperty("pos", NullValueHandling = NullValueHandling.Ignore)]
        public List<double> Pos { get; set; }

        [JsonProperty("equivalent", NullValueHandling = NullValueHandling.Ignore)]
        [JsonConverter(typeof(DecodeArrayConverter))]
        public List<long> Equivalent { get; set; }

        [JsonProperty("comment", NullValueHandling = NullValueHandling.Ignore)]
        public Comment Comment { get; set; }

        [JsonProperty("individuals", NullValueHandling = NullValueHandling.Ignore)]
        public List<Individual> Individuals { get; set; }

        [JsonProperty("description", NullValueHandling = NullValueHandling.Ignore)]
        public CommentClass Description { get; set; }
    }

    public partial class Comment
    {
        [JsonProperty("en", NullValueHandling = NullValueHandling.Ignore)]
        public string En { get; set; }

        [JsonProperty("undefined", NullValueHandling = NullValueHandling.Ignore)]
        public string Undefined { get; set; }
    }

    public partial class CommentClass
    {
        [JsonProperty("en")]
        public string En { get; set; }
    }

    public partial class Individual
    {
        [JsonProperty("iri")]
        public Uri Iri { get; set; }

        [JsonProperty("labels")]
        public Labels Labels { get; set; }
    }

    public partial class Labels
    {
        [JsonProperty("IRI-based")]
        public string IriBased { get; set; }
    }

    public partial class PurpleLabel
    {
        [JsonProperty("IRI-based", NullValueHandling = NullValueHandling.Ignore)]
        public string IriBased { get; set; }

        [JsonProperty("undefined", NullValueHandling = NullValueHandling.Ignore)]
        public string Undefined { get; set; }

        [JsonProperty("de", NullValueHandling = NullValueHandling.Ignore)]
        public string De { get; set; }

        [JsonProperty("en", NullValueHandling = NullValueHandling.Ignore)]
        public string En { get; set; }
    }

    public partial class Header
    {
        [JsonProperty("languages")]
        public List<string> Languages { get; set; }

        [JsonProperty("baseIris")]
        public List<Uri> BaseIris { get; set; }

        [JsonProperty("prefixList")]
        public PrefixList PrefixList { get; set; }

        [JsonProperty("title")]
        public Comments Title { get; set; }

        [JsonProperty("iri")]
        public Uri Iri { get; set; }

        [JsonProperty("version")]
        public string Version { get; set; }

        [JsonProperty("author")]
        public List<string> Author { get; set; }

        [JsonProperty("description")]
        public Comments Description { get; set; }

        [JsonProperty("labels")]
        public Comments Labels { get; set; }

        [JsonProperty("comments")]
        public Comments Comments { get; set; }

        [JsonProperty("other")]
        public Other Other { get; set; }
    }

    public partial class Comments
    {
        [JsonProperty("undefined")]
        public string Undefined { get; set; }
    }

    public partial class Other
    {
        [JsonProperty("date")]
        public List<BackwardCompatibleWith> Date { get; set; }

        [JsonProperty("priorVersion")]
        public List<BackwardCompatibleWith> PriorVersion { get; set; }

        [JsonProperty("creator")]
        public List<BackwardCompatibleWith> Creator { get; set; }

        [JsonProperty("contributor")]
        public List<BackwardCompatibleWith> Contributor { get; set; }

        [JsonProperty("incompatibleWith")]
        public List<BackwardCompatibleWith> IncompatibleWith { get; set; }

        [JsonProperty("rights")]
        public List<BackwardCompatibleWith> Rights { get; set; }

        [JsonProperty("versionInfo")]
        public List<BackwardCompatibleWith> VersionInfo { get; set; }

        [JsonProperty("title")]
        public List<BackwardCompatibleWith> Title { get; set; }

        [JsonProperty("backwardCompatibleWith")]
        public List<BackwardCompatibleWith> BackwardCompatibleWith { get; set; }
    }

    public partial class BackwardCompatibleWith
    {
        [JsonProperty("identifier")]
        public string Identifier { get; set; }

        [JsonProperty("language")]
        public Language Language { get; set; }

        [JsonProperty("value")]
        public string Value { get; set; }

        [JsonProperty("type")]
        public TypeEnum Type { get; set; }
    }

    public partial class PrefixList
    {
        [JsonProperty("owl")]
        public Uri Owl { get; set; }

        [JsonProperty("rdf")]
        public Uri Rdf { get; set; }

        [JsonProperty("other")]
        public Uri Other { get; set; }

        [JsonProperty("xsd")]
        public Uri Xsd { get; set; }

        [JsonProperty("")]
        public Uri Empty { get; set; }

        [JsonProperty("dc")]
        public Uri Dc { get; set; }

        [JsonProperty("xml")]
        public Uri Xml { get; set; }

        [JsonProperty("rdfs")]
        public Uri Rdfs { get; set; }

        [JsonProperty("this")]
        public Uri This { get; set; }
    }

    public partial class PropertyAttribute
    {
        [JsonProperty("id")]
        public string Id { get; set; }

        [JsonProperty("iri", NullValueHandling = NullValueHandling.Ignore)]
        public Uri Iri { get; set; }

        [JsonProperty("baseIri", NullValueHandling = NullValueHandling.Ignore)]
        public Uri BaseIri { get; set; }

        [JsonProperty("label", NullValueHandling = NullValueHandling.Ignore)]
        public PropertyAttributeLabel? Label { get; set; }

        [JsonProperty("attributes", NullValueHandling = NullValueHandling.Ignore)]
        public List<string> Attributes { get; set; }

        [JsonProperty("domain")]
        public string Domain { get; set; }

        [JsonProperty("range")]
        public string Range { get; set; }

        [JsonProperty("pos", NullValueHandling = NullValueHandling.Ignore)]
        public List<double> Pos { get; set; }

        [JsonProperty("comment", NullValueHandling = NullValueHandling.Ignore)]
        public CommentClass Comment { get; set; }

        [JsonProperty("description", NullValueHandling = NullValueHandling.Ignore)]
        public PurpleDescription Description { get; set; }

        [JsonProperty("maxCardinality", NullValueHandling = NullValueHandling.Ignore)]
        [JsonConverter(typeof(ParseStringConverter))]
        public long? MaxCardinality { get; set; }

        [JsonProperty("minCardinality", NullValueHandling = NullValueHandling.Ignore)]
        [JsonConverter(typeof(ParseStringConverter))]
        public long? MinCardinality { get; set; }

        [JsonProperty("inverse", NullValueHandling = NullValueHandling.Ignore)]
        [JsonConverter(typeof(ParseStringConverter))]
        public long? Inverse { get; set; }

        [JsonProperty("cardinality", NullValueHandling = NullValueHandling.Ignore)]
        [JsonConverter(typeof(ParseStringConverter))]
        public long? Cardinality { get; set; }

        [JsonProperty("subproperty", NullValueHandling = NullValueHandling.Ignore)]
        [JsonConverter(typeof(DecodeArrayConverter))]
        public List<long> Subproperty { get; set; }

        [JsonProperty("superproperty", NullValueHandling = NullValueHandling.Ignore)]
        [JsonConverter(typeof(DecodeArrayConverter))]
        public List<long> Superproperty { get; set; }
    }

    public partial class PurpleDescription
    {
        [JsonProperty("de", NullValueHandling = NullValueHandling.Ignore)]
        public string De { get; set; }

        [JsonProperty("en", NullValueHandling = NullValueHandling.Ignore)]
        public string En { get; set; }

        [JsonProperty("es", NullValueHandling = NullValueHandling.Ignore)]
        public string Es { get; set; }
    }

    public partial class FluffyLabel
    {
        [JsonProperty("IRI-based")]
        public string IriBased { get; set; }

        [JsonProperty("zh-hans", NullValueHandling = NullValueHandling.Ignore)]
        public string ZhHans { get; set; }

        [JsonProperty("en", NullValueHandling = NullValueHandling.Ignore)]
        public string En { get; set; }

        [JsonProperty("fr", NullValueHandling = NullValueHandling.Ignore)]
        public string Fr { get; set; }

        [JsonProperty("undefined", NullValueHandling = NullValueHandling.Ignore)]
        public string Undefined { get; set; }
    }

    public partial class Settings
    {
        [JsonProperty("global")]
        public Global Global { get; set; }

        [JsonProperty("gravity")]
        public Gravity Gravity { get; set; }

        [JsonProperty("filter")]
        public Filter Filter { get; set; }

        [JsonProperty("modes")]
        public Modes Modes { get; set; }
    }

    public partial class Filter
    {
        [JsonProperty("checkBox")]
        public List<CheckBox> CheckBox { get; set; }

        [JsonProperty("degreeSliderValue")]
        [JsonConverter(typeof(ParseStringConverter))]
        public long DegreeSliderValue { get; set; }
    }

    public partial class CheckBox
    {
        [JsonProperty("id")]
        public string Id { get; set; }

        [JsonProperty("checked")]
        public bool Checked { get; set; }
    }

    public partial class Global
    {
        [JsonProperty("zoom")]
        public string Zoom { get; set; }

        [JsonProperty("translation")]
        public List<double> Translation { get; set; }

        [JsonProperty("paused")]
        public bool Paused { get; set; }
    }

    public partial class Gravity
    {
        [JsonProperty("classDistance")]
        public long ClassDistance { get; set; }

        [JsonProperty("datatypeDistance")]
        public long DatatypeDistance { get; set; }
    }

    public partial class Modes
    {
        [JsonProperty("checkBox")]
        public List<CheckBox> CheckBox { get; set; }

        [JsonProperty("colorSwitchState")]
        public bool ColorSwitchState { get; set; }
    }

    public enum Language { Undefined };

    public enum TypeEnum { Iri, Label };

    public partial struct ClassAttributeLabel
    {
        public PurpleLabel PurpleLabel;
        public string String;

        public static implicit operator ClassAttributeLabel(PurpleLabel PurpleLabel) => new ClassAttributeLabel { PurpleLabel = PurpleLabel };
        public static implicit operator ClassAttributeLabel(string String) => new ClassAttributeLabel { String = String };
    }

    public partial struct PropertyAttributeLabel
    {
        public FluffyLabel FluffyLabel;
        public string String;

        public static implicit operator PropertyAttributeLabel(FluffyLabel FluffyLabel) => new PropertyAttributeLabel { FluffyLabel = FluffyLabel };
        public static implicit operator PropertyAttributeLabel(string String) => new PropertyAttributeLabel { String = String };
    }

    public partial class Welcome
    {
        public static Welcome FromJson(string json) => JsonConvert.DeserializeObject<Welcome>(json, Converter.Settings);
    }

    public static class Serialize
    {
        public static string ToJson(this Welcome self) => JsonConvert.SerializeObject(self, Converter.Settings);
    }

    internal static class Converter
    {
        public static readonly JsonSerializerSettings Settings = new JsonSerializerSettings
        {
            MetadataPropertyHandling = MetadataPropertyHandling.Ignore,
            DateParseHandling = DateParseHandling.None,
            Converters =
            {
                ClassAttributeLabelConverter.Singleton,
                LanguageConverter.Singleton,
                TypeEnumConverter.Singleton,
                PropertyAttributeLabelConverter.Singleton,
                new IsoDateTimeConverter { DateTimeStyles = DateTimeStyles.AssumeUniversal }
            },
        };
    }

    internal class DecodeArrayConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(List<long>);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            reader.Read();
            var value = new List<long>();
            while (reader.TokenType != JsonToken.EndArray)
            {
                var converter = ParseStringConverter.Singleton;
                var arrayItem = (long)converter.ReadJson(reader, typeof(long), null, serializer);
                value.Add(arrayItem);
                reader.Read();
            }
            return value;
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            var value = (List<long>)untypedValue;
            writer.WriteStartArray();
            foreach (var arrayItem in value)
            {
                var converter = ParseStringConverter.Singleton;
                converter.WriteJson(writer, arrayItem, serializer);
            }
            writer.WriteEndArray();
            return;
        }

        public static readonly DecodeArrayConverter Singleton = new DecodeArrayConverter();
    }

    internal class ParseStringConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(long) || t == typeof(long?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            long l;
            if (Int64.TryParse(value, out l))
            {
                return l;
            }
            throw new Exception("Cannot unmarshal type long");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (long)untypedValue;
            serializer.Serialize(writer, value.ToString());
            return;
        }

        public static readonly ParseStringConverter Singleton = new ParseStringConverter();
    }

    internal class ClassAttributeLabelConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(ClassAttributeLabel) || t == typeof(ClassAttributeLabel?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            switch (reader.TokenType)
            {
                case JsonToken.String:
                case JsonToken.Date:
                    var stringValue = serializer.Deserialize<string>(reader);
                    return new ClassAttributeLabel { String = stringValue };
                case JsonToken.StartObject:
                    var objectValue = serializer.Deserialize<PurpleLabel>(reader);
                    return new ClassAttributeLabel { PurpleLabel = objectValue };
            }
            throw new Exception("Cannot unmarshal type ClassAttributeLabel");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            var value = (ClassAttributeLabel)untypedValue;
            if (value.String != null)
            {
                serializer.Serialize(writer, value.String);
                return;
            }
            if (value.PurpleLabel != null)
            {
                serializer.Serialize(writer, value.PurpleLabel);
                return;
            }
            throw new Exception("Cannot marshal type ClassAttributeLabel");
        }

        public static readonly ClassAttributeLabelConverter Singleton = new ClassAttributeLabelConverter();
    }

    internal class LanguageConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(Language) || t == typeof(Language?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            if (value == "undefined")
            {
                return Language.Undefined;
            }
            throw new Exception("Cannot unmarshal type Language");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (Language)untypedValue;
            if (value == Language.Undefined)
            {
                serializer.Serialize(writer, "undefined");
                return;
            }
            throw new Exception("Cannot marshal type Language");
        }

        public static readonly LanguageConverter Singleton = new LanguageConverter();
    }

    internal class TypeEnumConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(TypeEnum) || t == typeof(TypeEnum?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            switch (value)
            {
                case "iri":
                    return TypeEnum.Iri;
                case "label":
                    return TypeEnum.Label;
            }
            throw new Exception("Cannot unmarshal type TypeEnum");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (TypeEnum)untypedValue;
            switch (value)
            {
                case TypeEnum.Iri:
                    serializer.Serialize(writer, "iri");
                    return;
                case TypeEnum.Label:
                    serializer.Serialize(writer, "label");
                    return;
            }
            throw new Exception("Cannot marshal type TypeEnum");
        }

        public static readonly TypeEnumConverter Singleton = new TypeEnumConverter();
    }

    internal class PropertyAttributeLabelConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(PropertyAttributeLabel) || t == typeof(PropertyAttributeLabel?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            switch (reader.TokenType)
            {
                case JsonToken.String:
                case JsonToken.Date:
                    var stringValue = serializer.Deserialize<string>(reader);
                    return new PropertyAttributeLabel { String = stringValue };
                case JsonToken.StartObject:
                    var objectValue = serializer.Deserialize<FluffyLabel>(reader);
                    return new PropertyAttributeLabel { FluffyLabel = objectValue };
            }
            throw new Exception("Cannot unmarshal type PropertyAttributeLabel");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            var value = (PropertyAttributeLabel)untypedValue;
            if (value.String != null)
            {
                serializer.Serialize(writer, value.String);
                return;
            }
            if (value.FluffyLabel != null)
            {
                serializer.Serialize(writer, value.FluffyLabel);
                return;
            }
            throw new Exception("Cannot marshal type PropertyAttributeLabel");
        }

        public static readonly PropertyAttributeLabelConverter Singleton = new PropertyAttributeLabelConverter();
    }
}
